/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package keystore;

import com.google.gson.Gson;
import keystore.exceptions.HttpException;
import keystore.exceptions.ResourceNotFoundException;
import keystore.handler.WatchHandler;
import keystore.models.ErrorResponse;
import keystore.models.KeyValue;
import keystore.models.StatusResponse;
import keystore.services.KeyValueStoreService;
import keystore.services.KeyValueStoreServiceImpl;
import spark.Request;
import spark.Response;

import java.util.Optional;

import static spark.Spark.*;


public class App {
    public static void main(String[] args) {
        final KeyValueStoreService keyValueStoreService = new KeyValueStoreServiceImpl();
        final WatchHandler watchHandler = new WatchHandler(keyValueStoreService);

        webSocket("/watch", watchHandler);

        post("/keyvalue", (request, response) -> {
            response.type("application/json");

            KeyValue Values = new Gson().fromJson(request.body(), KeyValue.class);
            keyValueStoreService.add(Values);

            return new Gson().toJson(StatusResponse.SUCCESS);
        });

        get("/keyvalue", (request, response) -> {
            response.type("application/json");

            return new Gson().toJson(keyValueStoreService.getAll());
        });

        get("/keyvalue/:key", (request, response) -> {
            response.type("application/json");
            Optional<KeyValue> maybeKeyValue = keyValueStoreService.get(request.params("key"));

            return new Gson().toJson(maybeKeyValue.orElseThrow(ResourceNotFoundException::new));
        });

        delete("/keyvalue/:key", (request, response) -> {
            response.type("application/json");

            if(keyValueStoreService.delete(request.params(":key"))) {
                return new Gson().toJson(StatusResponse.SUCCESS);
            }

            throw new ResourceNotFoundException();
        });

        notFound(App::notFoundHandler);
        //exception(HttpException.class, App::exceptionHandler);
        exception(Exception.class, App::exceptionHandler);
    }

    private static String notFoundHandler(Request request, Response response) {
        response.status(404);
        return new Gson().toJson(new ErrorResponse("Not found"));
    }

    private static void exceptionHandler(Exception t, Request request, Response response) {
        int status = 500;
        String message = "Internal server error";

        if(t instanceof HttpException) {
            HttpException exception = (HttpException) t;
            status = exception.getStatusCode();
            message = exception.getMessage();
        }

        response.status(status);
        response.body(new Gson().toJson(new ErrorResponse(message)));
    }

}

